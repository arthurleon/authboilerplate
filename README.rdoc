= LEIAME
==Sobre este boilerplate
Este boilerplate tem como objetivo acelerar o desenvolvimento para quem precisa criar uma aplicação com autententicação e autorização de usuários mediante um email e senha.

Além dessas funcionalidades, há também alguns itens adicionais, como CSS's e traduções que também aceleram um pouco o trabalho.

===Instalação
Depois de clonar o repositório, acesse a pasta do aplicativo execute o comando:

<tt>bundle install</tt>

e em seguida:

<tt>rake app:setup</tt>

A princípio existe somente o usuário Admin, que tem o poder de fazer tudo, inclusive criar outros usuários com outros perfis.

Sugestões são bem vindas!

===Admin
email: admin@adminmail.com
password: password

Este usuário pode alterar o próprio perfil e administrar outros perfis.

===Ruby e Rails
* ruby 2.1.2p95
* ruby 4.1.1

===Systema operacional:
* Xubuntu 14.04

===Principais Gems
{Devise 3.2.4}[https://github.com/plataformatec/devise]

{Omniauth}[https://github.com/intridea/omniauth]

{CanCanCan 1.9}[https://github.com/CanCanCommunity/cancancan]

{RoleModel}[https://github.com/martinrehfeld/role_model]

===Dependências
Este ambiente de desenvolvimento usa SQLite3, então certifique-se de que está instalado e, caso precise instalar, rode o comando:

<tt>apt-get install libsqlite3-dev</tt>

= Adicionais
==MailCatcher

Utilizamos o {MailCatcher}[https://github.com/sj26/mailcatcher] no ambiente de desenvolvimento para visualizar os emails enviados pelo sistema.

Esta pequena gem é um servidor SMTP simples que captura os emails enviados para porta 1025 (smtp://localhost:1025).

NÃO DEVE SER INSTALADO VIA GEMFILE!!!

<b>Instalação</b>

<tt>$ gem install mailcatcher</tt>

<tt>$ mailcatcher &</tt>

Para ver os emails recebido acesse: http://localhost:1080/
==Bootstrap e CSS
Também incluímos o {Bootstrap-sass}[https://github.com/twbs/bootstrap-sass] e suas dependências para facilitar a criação das interfaces.

Para ter forms mais bonitos que os default, incluímos o arquivo <tt>forms.css.scss</tt>. Esse arquivo tem a classe <tt>.clear-frm</tt> que aplicamos aos principais forms da aplicação.

Incluímos também a classe <tt>.vertical-center</tt> em <tt>application.css.scss</tt>, para alinhar verticamente qualquer elemento dentro do <i>parent element</i>.

Temos também o menu lateral, onde são apresentadas as opções disponíveis para cada usuário. Para colocar mais opções respeitanto o perfil de cada usuário, recomendamos utilizar a seguinte estrutura:

<tt>
<% if can? :read, User %>

    <li><%= link_to "Usuários", admin_users_path %></li>

<% end %>
</tt>

==Internacionalização
O rails vem por padrão com capacidade de internacionalização, utilizamos esta capacidade para trabalhar com locale = "pt-BR" por default e enconding = "utf8".

Utilizamos {traduções das mensagem do Devise}[https://github.com/plataformatec/devise/wiki/I18n] e também traduzimos as views:

* devise/session/new.html.erb

* devise/shared/_links.erb

colocando as traduções no arquivo <tt>config/locale/devise.views.pt-BR.yml</tt>.

Também pegamos as traduções já feitas dos principais helper e modulos do Rails, que estão no arquivo <tt>config/locale/devise.views.pt-BR.yml</tt>.

Para criar suas próprias traduções, inclua nos arquivos citados aqui, ou crie arquivos novos para cada escopo.

=Mais dúvidas?
Veja a {Wiki}[https://github.com/arthurleon/authboilerplate/wiki]
